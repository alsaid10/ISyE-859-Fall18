## Areen Alsaid & Ammad Amin 

##### 1.  ##The problem we want to address involves detecting mind wandering through steering behavior and signals. 
We hope our model can help drivers recognize when their minds wander so they can become safer drivers. 

##### 2. The data was collected from 9 drivers as they were driving on a monotonous highway which can be a boring task. 
They were periodically probed and asked whether their mind was wandering or not (at the time of the probe). 
The data includes driving behavior data (speed, steering wheel angle, braking input, accelerator input, lane deviation) 
along with their response to the mind wandering probe which is our dependent variable.We invistigaetd the driving behavior
in the 10 seconds preceding a probe as predictor of mind wandering. We used two tyoes of features. 
First is simple common features (mean and standard deviation) of steering, accelarator input, speed and lane deviation. 
Second, we used more complex features such as entropy, spike, and curvature.

##### 3. The validity of our algorithm is very limited. According to the UTOS framework, here's a detailed explanation 
of why the validity is limited.
  U: Units -->  Our data was collected from 9 participant at the University of George Mason. 9 peopl is a very small 
  number that does not represent a population.
  S: Setting -->  The experimnet was run in a driving simulator, which may not apply to real driving conditions.

Also, construct validity is limited. Driver were periodically asked to report the state, however, we are not sure that they were actaully reporting mind wandering rather than fatigue.



##### First load the libraries
```{r}
library(tidyverse)
library(ggplot2)
library(caret)
library(caTools)
library(pROC)
library(devtools)
devtools::install_github("robjhyndman/tsfeatures") #to install package from github
library(tsfeatures)
devtools::install_github("robjhyndman/tscompdata") #to install package from github
library(tscompdata)
library(forecast)
library(psych)
devtools::install_github("robjhyndman/anomalous") #to install package from github
library(anomalous)
library(e1071)
```

###### Next load the dataset:
```{r}
mindWanderingData = read_csv("/Users/areenalsaid/Google Drive/Research/Mind Wandering/R codes/Mind_Wandering_edits/mindWandering2/mindWanderingRawData.csv", col_names = TRUE)[, 1:21]
```

###### We are filtering out the 10 second after the probe (to only keep the 10 seconds prior)
```{r}
mindWanderingData = mindWanderingData %>% filter(`preToneOrPostTone(1=preTone 2=postTone)` == '1')
```

###### Select the variables we want
```{r}
mindWanderingData = mindWanderingData %>% select(c(1,2,3,4,11,13,16,17,19,20))
```

###### Rename the dependent variable
```{r}
names(mindWanderingData)[4]="state"
```

###### Group and summarize the data
```{r}
mindWanderingData = mindWanderingData  %>% group_by(subject, day, drive, probeNumber, state) %>% summarise(steering.m = mean(steerInDegrees), speed.m = mean(speedInMPH), acc.m = mean(acceleratorInput), ld.m = mean(laneDeviation), steering.sd = sd(steerInDegrees), speed.sd = sd(speedInMPH), acc.sd = sd(acceleratorInput),ld.sd = sd(laneDeviation) )
```

###### Set seed for reproducability
```{r}
set.seed(400)
```

###### Shuffle rows
```{r}
mw.model = mindWanderingData[,-c(1,2,3,4)]
rows = sample(nrow(mw.model))
mw.model = mw.model[rows,]
mw.model$state = as.factor(mw.model$state)
levels(mw.model$state) = c("MW", "EN")

```
###### Create box plots
```{r}
ggplot(data = mw.model) +
  geom_boxplot(mapping = aes(x = state, y = steering.m), size=.2)+
  xlab('Driver State')+
  ylab('Mean of Steering Wheel Angle')+
  theme_bw()


ggplot(data = mw.model) +
  geom_boxplot(mapping = aes(x = state, y = steering.sd), size=.2)+
  xlab('Driver State')+
  ylab('Standard Deviation of Steering Wheel Angle')+
  theme_bw()

ggplot(data = mw.model) +
  geom_boxplot(mapping = aes(x = state, y = speed.m), size=.2)+
  xlab('Driver State')+
  ylab('Mean of Speed')+
  theme_bw()

ggplot(data = mw.model) +
  geom_boxplot(mapping = aes(x = state, y = speed.sd), size=.2)+
  xlab('Driver State')+
  ylab('Standard Deviation of Speed')+
  theme_bw()

ggplot(data = mw.model) +
  geom_boxplot(mapping = aes(x = state, y = acc.m), size=.2)+
  xlab('Driver State')+
  ylab('Mean of Accelaration')+
  theme_bw()

ggplot(data = mw.model) +
  geom_boxplot(mapping = aes(x = state, y = acc.sd), size=.2)+
  xlab('Driver State')+
  ylab('Standard Deviation of Accelaration')+
  theme_bw()

ggplot(data = mw.model) +
  geom_boxplot(mapping = aes(x = state, y = ld.m), size=.2)+
  xlab('Driver State')+
  ylab('Mean of Lane Deviation')+
  theme_bw()

ggplot(data = mw.model) +
  geom_boxplot(mapping = aes(x = state, y = ld.sd), size=.2)+
  xlab('Driver State')+
  ylab('Standard Deviation of Lane Deviation')+
  theme_bw()
```
#### Split data into 70/30
```{r}
split = round(nrow(mw.model)*0.7)
train = mw.model [1:split,]
test = mw.model[(split+1):nrow(mw.model),]
```

```{r}
model.glm = glm(state ~., family = "binomial", train)
```

#### predict the test dataset
```{r}
p = predict(model.glm, test, type = "response")
```

#### We want to try a different threshold, as in our case it is more critical to detect mind wandering.

```{r}
p_class = ifelse(p>0.7, "EN", "MW")
test2 = test[["state"]]
confusionMatrix(as.factor(p_class),  test2)
```

#### Plot AUC 
```{r}
colAUC(p, test[["state"]], plotROC = "TRUE")
```

##### Create the same model using 10k-cross-validation

```{r}
model1 = train(
  state ~., mw.model,
  method = "glm", family="binomial",
  trControl = trainControl(method = "cv",  number = 10, verboseIter = TRUE,
                           classProbs = T,savePredictions = "final",summaryFunction = twoClassSummary),
  metric = "ROC"
)
```

##### Confusion Matrix
```{r}
confusionMatrix(model1)
```

#### ROC
```{r}
plot(roc(predictor = model1$pred$EN, response = model1$pred$obs), xlim = c(1,0))

```


##### Random Forests
```{r}
model2 = train(
  state ~., mw.model,
  tuneLength = 5,
  method = "ranger",
  trControl = trainControl(method = "cv", number = 10, verboseIter = TRUE)
)

```

```{r}
model2
```

```{r}
confusionMatrix(model2)
```

##### Support Vector Machines
```{r}
model3 = train(
  state ~., mw.model,
  tuneLength = 5,
  method = "svmLinear",
  trControl = trainControl(method = "cv", number = 10, verboseIter = TRUE)
)

```
##### Confusion Matrix
```{r}
confusionMatrix(model3)
```
```{r}
featurePlot(x = mw.model[, 2:9], y = mw.model$state, 
            plot = "box",
            type = c("p", "smooth"), span = .5,
            layout = c(4, 2))
```






